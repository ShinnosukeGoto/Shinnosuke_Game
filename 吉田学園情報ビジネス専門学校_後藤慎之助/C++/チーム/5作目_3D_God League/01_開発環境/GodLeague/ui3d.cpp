//===============================================
//
// 3Dカード処理 (billboard.cpp)
// Author : 樋宮匠
//
//===============================================

//========================
// インクルードファイル
//========================
#include "ui3d.h"
#include "manager.h"
#include "renderer.h"

//========================
// 静的メンバ変数宣言
//========================
LPDIRECT3DTEXTURE9 CUi3D::m_apTexture[UI3D_MAX_TEX] = {};

//=============================================================================
// コンストラクタ
//=============================================================================
CUi3D::CUi3D()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CUi3D::~CUi3D()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CUi3D::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	SetSize(NAME_HEIGHT, NAME_WIDTH);

	CBillboard::Init(pos, size);

	return S_OK;
}

//=============================================================================
// 更新処理
//=============================================================================
void CUi3D::Update(void)
{
	CBillboard::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CUi3D::Draw(void)
{
	CBillboard::Draw();
}

//=============================================================================
// 終了処理
//=============================================================================
void CUi3D::Uninit(void)
{
	CBillboard::Uninit();
}

//=============================================================================
// 
//=============================================================================
HRESULT CUi3D::Load(void)
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/ui3d001.png", &m_apTexture[0]);
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/ui3d002.png", &m_apTexture[1]);

	return S_OK;
}

//=============================================================================
//　
//=============================================================================
void CUi3D::Unload(void)
{
	for (int nCount = 0; nCount < UI3D_MAX_TEX; nCount++)
	{
		if (m_apTexture[nCount] != NULL)
		{
			m_apTexture[nCount]->Release();
			m_apTexture[nCount] = NULL;
		}
	}
}

//=============================================================================
// インスタンス生成処理
//=============================================================================
CUi3D * CUi3D::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size, int player)
{
	CUi3D *pUi3D;
	pUi3D = new CUi3D;
	pUi3D->Init(pos, size);
	pUi3D->BindTexture(m_apTexture[player]);
	return pUi3D;
}